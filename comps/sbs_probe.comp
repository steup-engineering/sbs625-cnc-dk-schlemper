component sbs_probe "SBS probe functions";

author "Sascha Ittner";
license "GPL";

option singleton yes;

pin in bit emc_on;
pin in bit emc_auto;

pin io bit matprobe_req;
pin out bit matprobe_ack;

pin in bit matprobe_cyl_up;
pin in bit matprobe_cyl_down;
pin out bit matprobe_cyl_coil;
pin out bit matprobe_cyl_err;

pin io bit toolprobe_req;

pin in bit matprobe_in;
pin in bit toolprobe_in;
pin out bit probe_out;

param rw bit vac_disable;
param rw bit vac_cyl_linked;

pin io s32 vac_req_left;
pin in bit vac_cyl_up_left;
pin in bit vac_cyl_down_left;
pin out bit vac_cyl_coil_left;
pin out bit vac_cyl_left_err;

pin out bit vac_push_left_0;
pin out bit vac_push_left_1;
pin out bit vac_push_left_2;
pin out bit vac_push_left_3;

pin out bit vac_pull_left_0;
pin out bit vac_pull_left_1;
pin out bit vac_pull_left_2;
pin out bit vac_pull_left_3;

pin io s32 vac_req_right;
pin in bit vac_cyl_up_right;
pin in bit vac_cyl_down_right;
pin out bit vac_cyl_coil_right;
pin out bit vac_cyl_right_err;

pin out bit vac_push_right_0;
pin out bit vac_push_right_1;
pin out bit vac_push_right_2;
pin out bit vac_push_right_3;

pin out bit vac_pull_right_0;
pin out bit vac_pull_right_1;
pin out bit vac_pull_right_2;
pin out bit vac_pull_right_3;

pin in bit vac_manu_left_0;
pin in bit vac_manu_left_1;
pin in bit vac_manu_left_2;
pin in bit vac_manu_left_3;
pin out float vac_manu_left;

pin in bit vac_manu_right_0;
pin in bit vac_manu_right_1;
pin in bit vac_manu_right_2;
pin in bit vac_manu_right_3;
pin out float vac_manu_right;

pin in bit vac_push;
pin in bit vac_pull;

pin out bit vac_ack;

option data sbs_probe_data;
option extra_setup;

function _;

;;

#define PROBE_CYL_TIMEOUT 10000000000LL
#define VAC_CYL_TIMEOUT 5000000000LL

#define DEBOUNCE_TIMEOUT 100000000LL

typedef struct {
  int32_t last_req;

  long long cyl_on_timer;
  long long cyl_off_timer;

  int ack;
} vac_data;

typedef struct {
  long long matprobe_cyl_on_timer;
  long long matprobe_cyl_off_timer;

  vac_data vac_left;
  vac_data vac_right;
} sbs_probe_data;

EXTRA_SETUP() {
  memset(&data, 0, sizeof(sbs_probe_data));

  return 0;
}

void reset_vac(vac_data *vac, volatile hal_s32_t *req, volatile hal_bit_t *cyl_coil) {
  // keep request state of already activated cyl for safety reasons
  if (!*cyl_coil) {
    *req = 0;
  }

  vac->cyl_on_timer = PROBE_CYL_TIMEOUT;
  vac->cyl_off_timer = PROBE_CYL_TIMEOUT;
  vac->ack = 0;

  vac->last_req = *req;
}

void handle_vac(long long period, vac_data *vac, hal_s32_t req, hal_bit_t cyl_up, hal_bit_t cyl_down, volatile hal_bit_t *cyl_coil, volatile hal_bit_t *cyl_err) {
  // handle vac cylinder request
  if (req != 0) {
    *cyl_coil = 1;
    vac->cyl_off_timer = VAC_CYL_TIMEOUT;

    // check down only once, since it will get low on touch of vacuum pod
    if (cyl_down || vac->ack) {
      vac->ack = 1;
      vac->cyl_on_timer = DEBOUNCE_TIMEOUT;
    } else {
      if (vac->cyl_on_timer > 0) {
        vac->cyl_on_timer -= period;
      } else {
        *cyl_err = 1;
      }
    }
  } else {
    *cyl_coil = 0;
    vac->cyl_on_timer = PROBE_CYL_TIMEOUT;

    if (cyl_up) {
      vac->ack = 0;
      vac->cyl_off_timer = DEBOUNCE_TIMEOUT;
    } else {
      if (vac->cyl_off_timer > 0) {
        vac->cyl_off_timer -= period;
      } else {
        *cyl_err = 1;
      }
    }
  }
}

int vac_req_manu(hal_bit_t manu_0, hal_bit_t manu_1, hal_bit_t manu_2, hal_bit_t manu_3) {
  int req = 0;
  if (manu_0) {
    req |= (1 << 0);
  }
  if (manu_1) {
    req |= (1 << 1);
  }
  if (manu_2) {
    req |= (1 << 2);
  }
  if (manu_3) {
    req |= (1 << 3);
  }

  return req;  
}

void push_pull_vac(hal_s32_t req, hal_bit_t ena, volatile hal_bit_t *out_0, volatile hal_bit_t *out_1, volatile hal_bit_t *out_2, volatile hal_bit_t *out_3) {
  *out_0 = 0;
  *out_1 = 0;
  *out_2 = 0;
  *out_3 = 0;

  if (!ena) {
    return;
  }

  if (req & (1 << 0)) {
    *out_0 = 1;
  }
  if (req & (1 << 1)) {
    *out_1 = 1;
  }
  if (req & (1 << 2)) {
    *out_2 = 1;
  }
  if (req & (1 << 3)) {
    *out_3 = 1;
  }
}

FUNCTION(_) {
  int req_cnt;

  matprobe_cyl_coil = 0;
  matprobe_cyl_err = 0;
  vac_cyl_left_err = 0;
  vac_cyl_right_err = 0;
  probe_out = 0;

  // update manual vacuum requests
  vac_manu_left = (hal_float_t) vac_req_manu(vac_manu_left_0, vac_manu_left_1, vac_manu_left_2, vac_manu_left_3);
  vac_manu_right = (hal_float_t) vac_req_manu(vac_manu_right_0, vac_manu_right_1, vac_manu_right_2, vac_manu_right_3);

  // check if emc is on
  if (!emc_on) {
    toolprobe_req = 0;

    matprobe_req = 0;
    matprobe_ack = 0;
    data.matprobe_cyl_on_timer = PROBE_CYL_TIMEOUT;
    data.matprobe_cyl_off_timer = PROBE_CYL_TIMEOUT;

    reset_vac(&data.vac_left, &vac_req_left, &vac_cyl_coil_left);
    reset_vac(&data.vac_right, &vac_req_right, &vac_cyl_coil_right);
    vac_ack = 0;

    return;
  }

  // check for unique request
  req_cnt = 0;
  if (matprobe_req) {
    req_cnt++;
  }
  if (toolprobe_req) {
    req_cnt++;
  }
  if (vac_req_left != 0 || vac_req_right != 0) {
    // check for changed vac request (-> error)
    if (data.vac_left.last_req != 0 && vac_req_left != data.vac_left.last_req) {
      req_cnt++;
    }
    if (data.vac_right.last_req != 0 && vac_req_right != data.vac_right.last_req) {
      req_cnt++;
    }
    req_cnt++;
  }
  if (req_cnt > 1) {
    matprobe_cyl_err = 1;
    return;
  }

  // handle matprobe cylinder request
  if (matprobe_req) {
    matprobe_cyl_coil = 1;
    data.matprobe_cyl_off_timer = PROBE_CYL_TIMEOUT;

    if (matprobe_cyl_down) {
      matprobe_ack = 1;
      data.matprobe_cyl_on_timer = DEBOUNCE_TIMEOUT;
    } else {
      if (data.matprobe_cyl_on_timer > 0) {
        data.matprobe_cyl_on_timer -= period;
      } else {
        matprobe_cyl_err = 1;
      }
    }
  } else {
    matprobe_cyl_coil = 0;
    data.matprobe_cyl_on_timer = PROBE_CYL_TIMEOUT;

    if (matprobe_cyl_up) {
      matprobe_ack = 0;
      data.matprobe_cyl_off_timer = DEBOUNCE_TIMEOUT;
    } else {
      if (data.matprobe_cyl_off_timer > 0) {
        data.matprobe_cyl_off_timer -= period;
      } else {
        matprobe_cyl_err = 1;
      }
    }
  }

  // handle vac cylinder request
  if (!vac_disable) {
    if (vac_cyl_linked) {
      handle_vac(period, &data.vac_left, vac_req_left | vac_req_right, vac_cyl_up_left, vac_cyl_down_left, &vac_cyl_coil_left, &vac_cyl_left_err);
      handle_vac(period, &data.vac_right, vac_req_left | vac_req_right, vac_cyl_up_right, vac_cyl_down_right, &vac_cyl_coil_right, &vac_cyl_right_err);
    } else {
      handle_vac(period, &data.vac_left, vac_req_left, vac_cyl_up_left, vac_cyl_down_left, &vac_cyl_coil_left, &vac_cyl_left_err);
      handle_vac(period, &data.vac_right, vac_req_right, vac_cyl_up_right, vac_cyl_down_right, &vac_cyl_coil_right, &vac_cyl_right_err);
    }
  }

  // set probe output
  if (matprobe_req) {
    probe_out = matprobe_in;
  }
  if (toolprobe_req) {
    probe_out = toolprobe_in;
  }

  vac_ack = data.vac_left.ack || data.vac_right.ack;
  if (vac_req_left) {
    if (vac_cyl_linked) {
      vac_ack = data.vac_left.ack && data.vac_right.ack;
    } else {
      vac_ack = data.vac_left.ack;
    }
    probe_out = vac_ack && (!vac_cyl_down_left);
  }
  if (vac_req_right) {
    if (vac_cyl_linked) {
      vac_ack = data.vac_left.ack && data.vac_right.ack;
    } else {
      vac_ack = data.vac_right.ack;
    }
    probe_out = vac_ack && (!vac_cyl_down_right);
  }
  if (vac_req_left && vac_req_right) {
    vac_ack = data.vac_left.ack && data.vac_right.ack;
    probe_out = vac_ack && (!vac_cyl_down_left) && (!vac_cyl_down_right);
  }

  // update push/pull outputs
  push_pull_vac(vac_req_left, vac_push, &vac_push_left_0, &vac_push_left_1, &vac_push_left_2, &vac_push_left_3);
  push_pull_vac(vac_req_left, vac_pull, &vac_pull_left_0, &vac_pull_left_1, &vac_pull_left_2, &vac_pull_left_3);
  push_pull_vac(vac_req_right, vac_push, &vac_push_right_0, &vac_push_right_1, &vac_push_right_2, &vac_push_right_3);
  push_pull_vac(vac_req_right, vac_pull, &vac_pull_right_0, &vac_pull_right_1, &vac_pull_right_2, &vac_pull_right_3);
}

