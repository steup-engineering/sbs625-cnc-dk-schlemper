(info: notch -- _{notch processing})
o<notch> sub
  #<start_x>   = #1  (=0.0 _{Start X})
  #<start_y>   = #2  (=0.0 _{Start Y})
  #<len_x>     = #3  (=500.0 _{Length X})
  #<width_y>   = #4  (=200.0 _{Width Y})
  #<rest_z>    = #5  (=100.0 _{Rest Z})
  #<step>      = #6  (=4.0 _{Step size})
  #<dir>       = #7  (=0.0 _{Cut direction} _{[0:X, 1:Y]})
  #<fin_depth> = #8  (=0.0 _{Finnish depth})
  #<fin_step>  = #9  (=0.0 _{Finnish Step size})
  #<fin_feed>  = #10 (=1000.0 _{Finnish feed})

  ( get user parameters )
  #<blade_diam>   = #1001
  #<blade_thick>  = #1002
  #<start_z>      = #1005
  #<mat_z>        = #1006
  #<safe_z>       = #1007
  #<cut_feed>     = #1012

  #<blade_rad> = [ #<blade_diam> * 0.5 ]
  #<fin_z>     = [#<mat_z> - #<rest_z>]
  #<depth_z>   = [#<fin_z> - #<fin_depth>]

  ( constants )
  #<EPSILON> = 0.000001

  o<l01> if [#<start_x> LT -5000.0 or #<start_x> GT 5000.0 ]
    (MSG, _{Start X} [1] _{must be} _{between} -5000 _{and} 5000 mm_{_lay})
    m2
  o<l01> endif
  o<l02> if [#<start_y> LT -5000.0 or #<start_y> GT 5000.0 ]
    (MSG, _{Start Y} [2] _{must be} _{between} -5000 _{and} 5000 mm_{_lay})
    m2
  o<l02> endif
  o<l03> if [#<len_x> LT 0 or #<len_x> GT 5000.0 ]
    (MSG, _{Length X} [3] _{must be} _{between} 0 _{and} 5000 mm_{_lay})
    m2
  o<l03> endif
  o<l04> if [#<width_y> LT 0 or #<width_y> GT 5000.0 ]
    (MSG, _{Width Y} [4] _{must be} _{between} 0 _{and} 5000 mm_{_lay})
    m2
  o<l04> endif
  o<l05> if [#<rest_z> LT 0 or #<rest_z> GT [#<mat_z>]]
    (MSG, _{Rest Z} [5] _{must be} _{between} 0 _{and} _{Material Z}_{_lay})
    m2
  o<l05> endif
  o<l06> if [#<step> LT 0.1 or #<step> GT #<len_x> or #<step> GT #<width_y>]
    (MSG, _{Step size} [6] _{must be} _{between} 0.1 mm _{and} _{Length X}/_{Width Y}_{_lay})
    m2
  o<l06> endif
  o<l07> if [#<dir> LT 0.0 or #<dir> GT 1.0 ]
    (MSG, _{Cut direction} [7] _{must be} 0 _{or} 1_{_be})
    m2
  o<l07> endif
  o<l08> if [#<fin_depth> LT -5.0 or #<fin_depth> GT 5.0 ]
    (MSG, _{Finnish depth} [8] _{must be} _{between} -5.0 _{and} 5.0 mm_{_lay})
    m2
  o<l08> endif
  o<l09> if [#<fin_step> LT 0 or #<fin_step> GT #<blade_rad> ]
    (MSG, _{Finnish Step size} [9] _{must be} _{between} 0 mm _{and} _{Blade radius}_{_lay})
    m2
  o<l09> endif
  o<l10> if [#<fin_feed> LT 0 or #<fin_feed> GT 5000.0 ]
    (MSG, _{Finnish feed} [10] _{must be} _{between} 0 _{and} 5000 mm/s_{_lay})
    m2
  o<l10> endif

  o<l20> if [#<dir> EQ 0.0]
    #<end_x> = [#<start_x> + #<len_x>]
    #<end_y> = [#<start_y> + #<width_y>]
    o<cut_gen> CALL [#<start_x>][#<end_y>][#<start_z>][#<end_x>][#<end_y>][-#<depth_z>][0.0][0.0][-1.0][0.0][0.0][0.0][0.0][#<mat_z>][0.0]

    #<pos_y> = #<start_y>
    #<reverse> = -1.0
    o<l30> while [#<pos_y> LT [#<end_y> - #<blade_thick> - #<EPSILON>]]
      o<cut_gen> CALL [#<start_x>][#<pos_y>][#<start_z>][#<end_x>][#<pos_y>][-#<depth_z>][0.0][0.0][1.0][0.0][0.0][#<reverse>][0.0][#<mat_z>][0.0]
      #<pos_y> = [#<pos_y> + #<step>]
      #<reverse> = -#<reverse>
    o<l30> endwhile

    ( finishing )
    o<l31> if [ #<fin_feed> GT 0.0 and #<fin_step> GT 0.0 ]
      #<fin_start_y> = [#<start_y> + [#<blade_thick> * 0.5]]
      #<fin_end_y> = [#<start_y> + #<width_y> - [#<blade_thick> * 0.5]]

      ( move to safe position )
      #<pos_a> = 0.0
      #<pos_c> = 0.0
      o<safe_ac> call [#<mat_z> + #<blade_rad>] [#<pos_a>] [#<pos_c>]

      ( calculate correction distance )
      o<ac_offsets> CALL [#<pos_a>] [#<pos_c>]
      #<x_offset> = #900
      #<y_offset> = #901
      #<z_offset> = #902

      ( move to start position )
      g0 X[#<start_x> + #<x_offset>] Y[#<fin_start_y> + #<y_offset>]
      f#<cut_feed>
      g1 Z[#<mat_z> - #<depth_z> + #<z_offset>]
      f#<fin_feed>
      g1 Z[#<mat_z> - #<fin_z> + #<z_offset>]

      ( loop movement )
      #<pos_x> = #<start_x>
      #<pos_y> = #<fin_end_y>
      #<reverse> = -1.0
      o<l32> while [ #<pos_x> LT [#<end_x> - #<EPSILON>]]
        g1 X[#<pos_x> + #<x_offset>]
        g1 Y[#<pos_y> + #<y_offset>]
        #<reverse> = -#<reverse>
        o<l33> if [#<reverse> GT 0]
          #<pos_y> = #<fin_start_y>
        o<l33> else
          #<pos_y> = #<fin_end_y>
        o<l33> endif
        #<pos_x> = [ #<pos_x> + #<fin_step> ]
      o<l32> endwhile

      g1 Z[#<mat_z> + #<safe_z> + #<z_offset>]
    o<l31> endif

  o<l20> else

    #<end_x> = [#<start_x> + #<len_x>]
    #<end_y> = [#<start_y> + #<width_y>]
    o<cut_gen> CALL [#<end_x>][#<start_y>][#<start_z>][#<end_x>][#<end_y>][-#<depth_z>][0.0][0.0][1.0][0.0][0.0][0.0][0.0][#<mat_z>][0.0]

    #<pos_x> = #<start_x>
    #<reverse> = -1.0
    o<l40> while [#<pos_x> LT [#<end_x> - #<blade_thick> - #<EPSILON>]]
      o<cut_gen> CALL [#<pos_x>][#<start_y>][#<start_z>][#<pos_x>][#<end_y>][-#<depth_z>][0.0][0.0][-1.0][0.0][0.0][#<reverse>][0.0][#<mat_z>][0.0]
      #<pos_x> = [#<pos_x> + #<step>]
      #<reverse> = -#<reverse>
    o<l40> endwhile

    ( finishing )
    o<l41> if [ #<fin_feed> GT 0.0 and #<fin_step> GT 0.0 ]
      #<fin_start_x> = [#<start_x> + [#<blade_thick> * 0.5]]
      #<fin_end_x> = [#<start_x> + #<len_x> - [#<blade_thick> * 0.5]]

      ( move to safe position )
      #<pos_a> = 0.0
      #<pos_c> = 90.0
      o<safe_ac> call [#<mat_z> + #<blade_rad>] [#<pos_a>] [#<pos_c>]

      ( calculate correction distance )
      o<ac_offsets> CALL [#<pos_a>] [#<pos_c>]
      #<x_offset> = #900
      #<y_offset> = #901
      #<z_offset> = #902

      ( move to start position )
      g0 Y[#<start_y> + #<y_offset>] X[#<fin_start_x> + #<x_offset>]
      f#<cut_feed>
      g1 Z[#<mat_z> - #<depth_z> + #<z_offset>]
      f#<fin_feed>
      g1 Z[#<mat_z> - #<fin_z> + #<z_offset>]

      ( loop movement )
      #<pos_y> = #<start_y>
      #<pos_x> = #<fin_end_x>
      #<reverse> = -1.0
      o<l42> while [ #<pos_y> LT [#<end_y> - #<EPSILON>]]
        g1 Y[#<pos_y> + #<y_offset>]
        g1 X[#<pos_x> + #<x_offset>]
        #<reverse> = -#<reverse>
        o<l43> if [#<reverse> GT 0]
          #<pos_x> = #<fin_start_x>
        o<l43> else
          #<pos_x> = #<fin_end_x>
        o<l43> endif
        #<pos_y> = [ #<pos_y> + #<fin_step> ]
      o<l42> endwhile

      g1 Z[#<mat_z> + #<safe_z> + #<z_offset>]
    o<l41> endif
  o<l20> endif

o<notch> endsub

